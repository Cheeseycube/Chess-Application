import oracledb
import os
from dotenv import load_dotenv
import bcrypt

# If using oracle (locally hosted database): https://www.oracle.com/database/technologies/appdev/python/quickstartpythononprem.html

# If using oracle autonomous database: https://www.oracle.com/database/technologies/appdev/python/quickstartpython.html #first-option-tab

# if using sqlite3 locally hosted database: https://towardsdatascience.com/starting-with-sql-in-python-948e529586f2

# Indexing is useful if my database gets large

''' Documentation:
        Games Table:
            userID int            # Foreign Key
            datePlayed date
            platform varchar(20)  # chess.com, lichess, otb, etc...
            pgn raw(3000)         # this is the oracle equivalent of varbinary(3000)
            
        Users Table:
            userID NUMBER generated by default as identity   # Primary Key
            userName varchar(50) NOT NULL
            userPassword raw(70) UNIQUE
            hashSalt raw(40)
            '''
# TODO: Make UserNames Unique and get rid of userIDs all together
pool = None


def addGame(given_date, given_userName, given_platform, given_pgn):
    connection = makeConnection()
    cursor = connection.cursor()  # defining cursor for later use

    # use "INSERT IGNORE" to avoid inserting duplicates

    # insert into Games table
    sql_statement = ("insert into Games (datePlayed, userName, platform, pgn) "
                     "values(TO_DATE(:newdate, 'YYYY-MM-DD'), :newplatform, :newuser, :newpgn)")
    cursor.execute(sql_statement, [given_date, given_userName, given_platform, given_pgn])
    print(cursor.rowcount, "row inserted")

    connection.commit()  # close the connection
    print("connection closed")


# Uses the private field "pool" as defined by makeConnectionPool
def addUser(userName, password):
    # setting up the connection
    global pool

    if pool is None:
        print("Connection pool was null, aborting addUser operation")
        return -1

    connection = pool.acquire()
    cursor = connection.cursor()
    id_num = cursor.var(int)

    # hashing the password
    password = bytes(password, 'utf-8')
    salt = bcrypt.gensalt()
    password_hashed = bcrypt.hashpw(password, salt)

    # querying the database
    sql_statement = ("insert into Users (userName, userPassword, hashSalt)"
                     "values (:userName_bv, :userPassword_bv, :hashSalt_bv)"
                     "returning userID into :id_bv")
    try:
        cursor.execute(sql_statement, [userName, password_hashed, salt, id_num])
    except oracledb.IntegrityError:
        print("Your password is already in use, please provide another.")
        connection.commit()
        return -1

    connection.commit()
    # returning the new user's id number
    return id_num.getvalue()[0]


def getUsers():
    connection = makeConnection()
    cursor = connection.cursor()  # defining cursor for later use

    for row in cursor.execute('select userName from Users'):
        return row[0]
    connection.commit()

# returns a single connection to the database: mainly used for testing
def makeConnection():
    connection = oracledb.connect(
        user=os.getenv("USER"),
        password=os.getenv("PASSWORD"),
        dsn="(description= (retry_count=20)(retry_delay=3)(address=(protocol=tcps)(port=1522)("
            "host=adb.us-ashburn-1.oraclecloud.com))(connect_data=("
            "service_name=g83c4ff870b21c6_chessdatabase_high.adb.oraclecloud.com))(security=("
            "ssl_server_dn_match=yes)))",

        config_dir="../Oracle Wallet",
        wallet_location="Oracle Wallet",
        wallet_password=os.getenv("PASSWORD")
    )
    print("connection established")
    return connection


# sets the global "pool" variable for use by other functions
def makeConnectionPool(pool_size):
    pool_min = pool_size
    pool_max = pool_size
    pool_inc = 0
    pool_gmd = oracledb.SPOOL_ATTRVAL_WAIT

    _pool = oracledb.SessionPool(user=os.getenv("USER"),
                                 password=os.getenv("PASSWORD"),
                                 dsn="(description= (retry_count=20)(retry_delay=3)(address=(protocol=tcps)(port=1522)("
                                     "host=adb.us-ashburn-1.oraclecloud.com))(connect_data=("
                                     "service_name=g83c4ff870b21c6_chessdatabase_high.adb.oraclecloud.com))(security=("
                                     "ssl_server_dn_match=yes)))",
                                 config_dir="../Oracle Wallet",
                                 wallet_location="Oracle Wallet",
                                 wallet_password=os.getenv("PASSWORD"),
                                 min=pool_min,
                                 max=pool_max,
                                 increment=pool_inc,
                                 threaded=True,
                                 getmode=pool_gmd)
    global pool
    pool = _pool


def clearDatabase():
    connection = makeConnection()
    cursor = connection.cursor()  # defining cursor for later use
    cursor.execute("drop table Games")
    cursor.execute("drop table Users")
    connection.commit()
    print("database cleared")


def initializeDatabase():
    connection = makeConnection()
    cursor = connection.cursor()  # defining cursor for later use
    # create Users and Games tables
    cursor.execute(
        """create table Users(userID NUMBER generated by default as identity, userName varchar(50) NOT NULL, userPassword raw(70) UNIQUE, hashSalt raw(40), PRIMARY KEY (userID))""")
    cursor.execute("""create table Games(userID int, FOREIGN KEY (userID) REFERENCES Users(userID) ON DELETE CASCADE, 
    datePlayed date, platform varchar(20), pgn raw(3000))""")
    connection.commit()
    print("database initialized")


def getGames():
    connection = makeConnection()
    cursor = connection.cursor()  # defining cursor for later use

    for row in cursor.execute('select pgn from Games'):
        return row[0]


if __name__ == '__main__':
    load_dotenv()
    print("welcome")
    #clearDatabase()
    #initializeDatabase()

    makeConnectionPool(4)
    print(addUser('John', 'supersecurepassword'))

    '''password = 'dsjfdskjfsdkjflkdsjfkl'
    print(len(password))
    password = bytes(password, 'utf-8')
    salt = bcrypt.gensalt()
    hashed = bcrypt.hashpw(password, salt)

    print(f"password: {password}, password type: {type(password)}")
    print(f"salt: {salt} salt type: {type(salt)}")
    print(len(salt))
    print(f"hashed: {hashed} hashed type: {type(hashed)}")
    print(len(hashed))'''
